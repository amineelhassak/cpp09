void merge(std::deque<int>& left, std::deque<int>& right, std::deque<int>& result)
{
    while (!left.empty() && !right.empty())
    {
        if (left.front() <= right.front())
        {
            result.push_back(left.front());
            left.pop_front();
        }
        else
        {
            result.push_back(right.front());
            right.pop_front();
        }
    }

    while (!left.empty())
    {
        result.push_back(left.front());
        left.pop_front();
    }

    while (!right.empty())
    {
        result.push_back(right.front());
        right.pop_front();
    }
}

void sort(std::deque<int>& data)
{
    if (data.size() < 2)
        return;

    std::deque<int> left, right;
    size_t mid = data.size() / 2;
    for (size_t i = 0; i < mid; ++i)
        left.push_back(data[i]);

    for (size_t i = mid; i < data.size(); ++i)
        right.push_back(data[i]);
    sort(left);
    sort(right);
    std::deque<int> merged;
    merge(left, right, merged);
    data = merged;
}